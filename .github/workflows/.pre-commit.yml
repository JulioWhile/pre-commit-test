name: Pre-Commit Quality Gate
on:
  pull_request:
  push:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write  # Required for commenting on PRs

jobs:
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for getting full git history

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          # Install a specific version or remove this to use latest
          version: "0.4.18"

      - name: Cache UV
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: |
          # Install project dependencies if requirements.txt exists
          if [ -f "requirements.txt" ]; then
            echo "üì¶ Installing project dependencies with UV..."
            uv pip install -r requirements.txt
          fi

          # Install dev dependencies if requirements-dev.txt exists
          if [ -f "requirements-dev.txt" ]; then
            echo "üîß Installing dev dependencies with UV..."
            uv pip install -r requirements-dev.txt
          fi

      - name: Install pre-commit with UV
        run: uv tool install pre-commit

      - name: Get changed files (for PR)
        if: github.event_name == 'pull_request'
        run: |
          git fetch origin ${{ github.base_ref }}
          git diff --name-only origin/${{ github.base_ref }}...HEAD > changed_files.txt
          grep -E '\.(py|yml|yaml|json|csv)$' changed_files.txt > filtered_files.txt || true

      - name: Get changed files (for push)
        if: github.event_name == 'push'
        run: |
          git diff --name-only HEAD~1 HEAD > changed_files.txt
          grep -E '\.(py|yml|yaml|json|csv)$' changed_files.txt > filtered_files.txt || true

      - name: Debug - Show files to check
        run: |
          echo "Changed files:"
          cat changed_files.txt || echo "No changed_files.txt"
          echo ""
          echo "Filtered files for pre-commit:"
          cat filtered_files.txt || echo "No filtered_files.txt"

      - name: Run pre-commit checks
        id: precommit
        continue-on-error: true  # Don't fail the job yet, we want to comment first
        run: |
          if [ -s filtered_files.txt ]; then
            echo "üîç Running pre-commit checks on changed files..."

            # Force pre-commit to run without cache to avoid "skipped" issues
            export PRE_COMMIT_NO_CACHE=1

            # Capture output for PR comment
            echo "files_checked=true" >> $GITHUB_OUTPUT

            # Run with verbose output and capture both stdout and stderr
            if xargs pre-commit run --verbose --files < filtered_files.txt > precommit_output.txt 2>&1; then
              echo "result=success" >> $GITHUB_OUTPUT
              echo "‚úÖ All pre-commit checks passed!"
            else
              echo "result=failure" >> $GITHUB_OUTPUT
              echo ""
              echo "‚ùå Pre-commit checks failed!"
              echo ""
              echo "To fix locally, run:"
              if [ "${{ github.event_name }}" == "pull_request" ]; then
                echo "  pre-commit run --files \$(git diff --name-only origin/${{ github.base_ref }}...HEAD)"
              else
                echo "  pre-commit run --files \$(git diff --name-only HEAD~1 HEAD)"
              fi
            fi
          else
            echo "files_checked=false" >> $GITHUB_OUTPUT
            echo "result=no_files" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è  No relevant files to check."
          fi

      - name: Comment on PR - Success
        if: github.event_name == 'pull_request' && steps.precommit.outputs.files_checked == 'true' && steps.precommit.outputs.result == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read the list of checked files
            let checkedFiles = '';
            try {
              checkedFiles = fs.readFileSync('filtered_files.txt', 'utf8').trim();
            } catch (e) {
              checkedFiles = 'Unable to read file list';
            }

            const fileCount = checkedFiles.split('\n').filter(f => f.trim()).length;

            const comment = `## ‚úÖ Pre-commit Quality Checks Passed!

            **Files checked:** ${fileCount} file(s)
            \`\`\`
            ${checkedFiles}
            \`\`\`

            All quality checks have passed successfully! üéâ`;

            // Find existing comment to update or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment =>
              comment.body.includes('Pre-commit Quality Checks')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Comment on PR - Failure
        if: github.event_name == 'pull_request' && steps.precommit.outputs.files_checked == 'true' && steps.precommit.outputs.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read the output from pre-commit
            let output = '';
            try {
              output = fs.readFileSync('precommit_output.txt', 'utf8');
            } catch (e) {
              output = 'Unable to read pre-commit output';
            }

            // Read the list of checked files
            let checkedFiles = '';
            try {
              checkedFiles = fs.readFileSync('filtered_files.txt', 'utf8').trim();
            } catch (e) {
              checkedFiles = 'Unable to read file list';
            }

            const fileCount = checkedFiles.split('\n').filter(f => f.trim()).length;

            const comment = `## ‚ùå Pre-commit Quality Checks Failed

            **Files checked:** ${fileCount} file(s)

            ### üîß How to fix locally:
            \`\`\`bash
            # Check specific files that failed
            pre-commit run --files $(git diff --name-only origin/${{ github.base_ref }}...HEAD)

            # Or run on all changed files
            pre-commit run --all-files
            \`\`\`

            ### üìã Detailed Output:
            <details>
            <summary>Click to expand full pre-commit output</summary>

            \`\`\`
            ${output.length > 8000 ? output.substring(0, 8000) + '\n... (output truncated)' : output}
            \`\`\`
            </details>

            ### üìÅ Files that were checked:
            \`\`\`
            ${checkedFiles}
            \`\`\`

            Please fix the issues above and push your changes. The checks will run again automatically.`;

            // Find existing comment to update or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment =>
              comment.body.includes('Pre-commit Quality Checks')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Comment on PR - No Files
        if: github.event_name == 'pull_request' && steps.precommit.outputs.files_checked == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ‚ÑπÔ∏è Pre-commit Quality Checks - No Relevant Files

            No Python, YAML, JSON, or CSV files were changed in this PR.
            Quality checks were skipped. ‚ú®`;

            // Find existing comment to update or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment =>
              comment.body.includes('Pre-commit Quality Checks')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Final status check
        if: steps.precommit.outputs.files_checked == 'true' && steps.precommit.outputs.result == 'failure'
        run: |
          echo "‚ùå Pre-commit checks failed. See PR comment for details."
          exit 1
